
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { 
  Copy, 
  Share2, 
  BarChart2, 
  MessageSquare, 
  Download, 
  RefreshCw, 
  ExternalLink, 
  Linkedin,
  Twitter,
  Facebook,
  Mail,
  Link2,
  Check
} from 'lucide-react';
import { SummarizerResponse } from '@/services/summarizer';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import AnimatedButton from './AnimatedButton';
import { toast } from '@/components/ui/use-toast';
import { 
  DropdownMenu, 
  DropdownMenuContent, 
  DropdownMenuItem, 
  DropdownMenuLabel, 
  DropdownMenuSeparator, 
  DropdownMenuTrigger 
} from '@/components/ui/dropdown-menu';
import { Button } from '@/components/ui/button';
import { apiService } from '@/services/api';

interface SummaryResultProps {
  summary: SummarizerResponse;
  onReset: () => void;
}

const SummaryResult: React.FC<SummaryResultProps> = ({ summary, onReset }) => {
  const [activeTab, setActiveTab] = useState('summary');
  const [isCopied, setIsCopied] = useState(false);
  const [isGeneratingLink, setIsGeneratingLink] = useState(false);
  const [shareLink, setShareLink] = useState<string | null>(null);
  
  const copyToClipboard = () => {
    navigator.clipboard.writeText(summary.summary);
    setIsCopied(true);
    setTimeout(() => setIsCopied(false), 2000);
    
    toast({
      title: "Copied to clipboard",
      description: "The summary has been copied to your clipboard.",
      duration: 2000,
    });
  };
  
  const downloadSummary = () => {
    const fileName = summary.fileName ? 
      `summary-${summary.fileName.split('.')[0]}.txt` : 
      'text-summary.txt';
    
    const content = `
Summary: ${summary.summary}

${summary.keyPoints && summary.keyPoints.length > 0 ? `\nKey Points:\n${summary.keyPoints.map(point => `â€¢ ${point}`).join('\n')}` : ''}

${summary.sourceType === 'file' ? `\nSource: ${summary.fileName}` : ''}
${summary.sentiment ? `\nSentiment: ${summary.sentiment}` : ''}
${summary.wordCount ? `\nWord Count: ${summary.wordCount}` : ''}
${summary.readingTime ? `\nReading Time: ${summary.readingTime}` : ''}

Generated by AI Text Summarizer
    `.trim();
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Summary downloaded",
      description: `Saved as ${fileName}`,
      duration: 2000,
    });
  };
  
  const shareContent = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'AI Generated Summary',
          text: summary.summary,
        });
        toast({
          title: "Shared successfully",
          description: "Summary has been shared.",
          duration: 2000,
        });
      } catch (error) {
        console.error('Error sharing:', error);
        toast({
          title: "Sharing failed",
          description: "Unable to share the summary.",
          variant: "destructive",
          duration: 3000,
        });
      }
    } else {
      copyToClipboard();
      toast({
        title: "Share option not available",
        description: "Summary copied to clipboard instead.",
        duration: 3000,
      });
    }
  };

  const generateShareableLink = async () => {
    setIsGeneratingLink(true);
    try {
      const response = await apiService.generateSharingLink(summary.summary);
      
      if (response.success && response.data) {
        setShareLink(response.data.shareUrl);
        toast({
          title: "Shareable link generated",
          description: "Link expires in 24 hours. It has been copied to your clipboard.",
          duration: 3000,
        });
        
        navigator.clipboard.writeText(response.data.shareUrl);
      } else {
        throw new Error(response.error || 'Failed to generate link');
      }
    } catch (error) {
      console.error('Error generating link:', error);
      toast({
        title: "Error",
        description: "Failed to generate shareable link.",
        variant: "destructive",
        duration: 3000,
      });
    } finally {
      setIsGeneratingLink(false);
    }
  };

  const shareViaSocialMedia = async (platform: string) => {
    try {
      const shareText = summary.summary.substring(0, 280) + (summary.summary.length > 280 ? '...' : '');
      
      const content = {
        title: 'AI Generated Summary',
        text: shareText,
        url: shareLink || undefined
      };
      
      if (!shareLink && platform !== 'email') {
        await generateShareableLink();
      }
      
      // In a real app, this would connect to social media APIs
      const response = await apiService.shareViaSocialMedia(platform, content);
      
      if (response.success) {
        toast({
          title: "Shared successfully",
          description: `Summary has been shared via ${platform}.`,
          duration: 2000,
        });
      } else {
        throw new Error(response.error);
      }
    } catch (error) {
      console.error(`Error sharing via ${platform}:`, error);
      toast({
        title: "Sharing failed",
        description: `Unable to share via ${platform}.`,
        variant: "destructive",
        duration: 3000,
      });
    }
  };

  const shareViaEmail = () => {
    const subject = "AI Generated Summary";
    const body = `Here's a summary I generated using AI:\n\n${summary.summary}\n\n${shareLink ? `View online: ${shareLink}` : ''}`;
    
    window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
    
    toast({
      title: "Email client opened",
      description: "Summary has been added to a new email.",
      duration: 2000,
    });
  };

  const renderSourceInfo = () => {
    if (summary.sourceType === 'file' && summary.fileName) {
      return (
        <div className="text-xs text-muted-foreground flex items-center">
          <span className="flex items-center">
            {summary.fileType?.includes('image') ? (
              <svg className="w-3 h-3 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
                <circle cx="8.5" cy="8.5" r="1.5"/>
                <polyline points="21 15 16 10 5 21"/>
              </svg>
            ) : (
              <svg className="w-3 h-3 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/>
                <polyline points="14 2 14 8 20 8"/>
                <line x1="16" y1="13" x2="8" y2="13"/>
                <line x1="16" y1="17" x2="8" y2="17"/>
                <polyline points="10 9 9 9 8 9"/>
              </svg>
            )}
            Source: {summary.fileName}
          </span>
        </div>
      );
    } else if (summary.sourceType === 'url') {
      return (
        <div className="text-xs text-muted-foreground flex items-center">
          <span className="flex items-center">
            <ExternalLink className="w-3 h-3 mr-1" />
            Source: Web URL
          </span>
        </div>
      );
    }
    return null;
  };

  const variants = {
    hidden: { opacity: 0, y: 20 },
    visible: (i: number) => ({
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.1,
        duration: 0.5,
        ease: "easeOut"
      }
    })
  };

  return (
    <motion.div 
      className="w-full max-w-4xl mx-auto"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <motion.div 
        className="glass-card rounded-2xl overflow-hidden backdrop-blur-sm"
        initial={{ scale: 0.98 }}
        animate={{ scale: 1 }}
        transition={{ 
          type: "spring", 
          stiffness: 400, 
          damping: 30,
          delay: 0.1 
        }}
      >
        <div className="border-b border-border p-4 flex justify-between items-center">
          <div className="flex flex-col">
            <h3 className="text-lg font-medium">AI Summary</h3>
            <div className="flex items-center gap-2 mt-1">
              {renderSourceInfo()}
              {summary.wordCount && (
                <div className="text-xs text-muted-foreground">
                  <span className="flex items-center">
                    <svg className="w-3 h-3 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <polygon points="11 5 6 9 2 9 2 15 6 15 11 19 11 5"/>
                      <path d="M15.54 8.46a5 5 0 0 1 0 7.07"/>
                      <path d="M19.07 4.93a10 10 0 0 1 0 14.14"/>
                    </svg>
                    {summary.wordCount} words
                  </span>
                </div>
              )}
              {summary.readingTime && (
                <div className="text-xs text-muted-foreground">
                  <span className="flex items-center">
                    <svg className="w-3 h-3 mr-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                      <circle cx="12" cy="12" r="10"/>
                      <polyline points="12 6 12 12 16 14"/>
                    </svg>
                    {summary.readingTime}
                  </span>
                </div>
              )}
            </div>
          </div>
          <div className="flex space-x-1">
            <button 
              onClick={copyToClipboard}
              className="p-2 rounded-full hover:bg-muted transition-colors"
              title="Copy to clipboard"
            >
              {isCopied ? <Check className="w-4 h-4 text-green-500" /> : <Copy className="w-4 h-4 text-muted-foreground" />}
            </button>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <button className="p-2 rounded-full hover:bg-muted transition-colors" title="Share options">
                  <Share2 className="w-4 h-4 text-muted-foreground" />
                </button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <DropdownMenuLabel>Share Summary</DropdownMenuLabel>
                <DropdownMenuSeparator />
                
                <DropdownMenuItem onClick={shareViaSocialMedia.bind(null, 'twitter')} className="cursor-pointer">
                  <Twitter className="mr-2 h-4 w-4" />
                  <span>Share on Twitter</span>
                </DropdownMenuItem>
                
                <DropdownMenuItem onClick={shareViaSocialMedia.bind(null, 'linkedin')} className="cursor-pointer">
                  <Linkedin className="mr-2 h-4 w-4" />
                  <span>Share on LinkedIn</span>
                </DropdownMenuItem>
                
                <DropdownMenuItem onClick={shareViaSocialMedia.bind(null, 'facebook')} className="cursor-pointer">
                  <Facebook className="mr-2 h-4 w-4" />
                  <span>Share on Facebook</span>
                </DropdownMenuItem>
                
                <DropdownMenuItem onClick={shareViaEmail} className="cursor-pointer">
                  <Mail className="mr-2 h-4 w-4" />
                  <span>Share via Email</span>
                </DropdownMenuItem>
                
                <DropdownMenuSeparator />
                
                <DropdownMenuItem 
                  onClick={generateShareableLink} 
                  disabled={isGeneratingLink}
                  className="cursor-pointer"
                >
                  <Link2 className="mr-2 h-4 w-4" />
                  <span>{isGeneratingLink ? 'Generating...' : shareLink ? 'Copy Link Again' : 'Generate Shareable Link'}</span>
                </DropdownMenuItem>
                
                {shareLink && (
                  <div className="px-2 py-1.5 text-xs bg-muted/50 rounded m-1 overflow-hidden">
                    <div className="truncate">{shareLink}</div>
                  </div>
                )}
                
                <DropdownMenuSeparator />
                
                <DropdownMenuItem onClick={shareContent} className="cursor-pointer">
                  <Share2 className="mr-2 h-4 w-4" />
                  <span>Native Share</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
            
            <button 
              onClick={downloadSummary}
              className="p-2 rounded-full hover:bg-muted transition-colors"
              title="Download"
            >
              <Download className="w-4 h-4 text-muted-foreground" />
            </button>
          </div>
        </div>
        
        <Tabs value={activeTab} onValueChange={setActiveTab} className="p-4">
          <TabsList className="mb-4">
            <TabsTrigger value="summary" className="flex items-center gap-1">
              <MessageSquare className="w-4 h-4" />
              Summary
            </TabsTrigger>
            <TabsTrigger value="insights" className="flex items-center gap-1">
              <BarChart2 className="w-4 h-4" />
              Insights
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="summary" className="mt-0">
            <motion.div 
              className="prose prose-gray dark:prose-invert max-w-none summary-content"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
            >
              <p className="leading-relaxed text-base">{summary.summary}</p>
              
              {summary.keyPoints && summary.keyPoints.length > 0 && (
                <div className="mt-6">
                  <h4 className="text-base font-semibold mb-2">Key Points</h4>
                  <ul className="space-y-1 list-disc pl-5">
                    {summary.keyPoints.map((point, index) => (
                      <motion.li 
                        key={index}
                        custom={index}
                        initial="hidden"
                        animate="visible"
                        variants={variants}
                        className="text-sm"
                      >
                        {point}
                      </motion.li>
                    ))}
                  </ul>
                </div>
              )}
            </motion.div>
          </TabsContent>
          
          <TabsContent value="insights" className="mt-0">
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.3 }}
              className="space-y-6"
            >
              {summary.sentiment && (
                <div className="rounded-lg bg-primary/5 p-4">
                  <h4 className="text-sm font-medium mb-2">Content Sentiment</h4>
                  <div className="flex items-center">
                    <div className="w-full bg-muted rounded-full h-2.5">
                      <div 
                        className={`h-2.5 rounded-full ${
                          summary.sentiment.includes('positive') ? 'bg-green-500' : 
                          summary.sentiment.includes('negative') ? 'bg-red-500' : 'bg-amber-500'
                        }`}
                        style={{ 
                          width: summary.sentiment.includes('very positive') ? '90%' : 
                                summary.sentiment.includes('positive') ? '70%' : 
                                summary.sentiment.includes('very negative') ? '90%' : 
                                summary.sentiment.includes('negative') ? '70%' : '50%',
                          marginLeft: summary.sentiment.includes('negative') ? 'auto' : '0'
                        }}
                      ></div>
                    </div>
                  </div>
                  <p className="text-xs text-muted-foreground mt-2 capitalize">
                    The content has a {summary.sentiment} overall tone
                  </p>
                </div>
              )}
              
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Metric</TableHead>
                    <TableHead>Value</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {summary.wordCount && (
                    <TableRow>
                      <TableCell className="font-medium">Word Count</TableCell>
                      <TableCell>{summary.wordCount}</TableCell>
                    </TableRow>
                  )}
                  {summary.readingTime && (
                    <TableRow>
                      <TableCell className="font-medium">Reading Time</TableCell>
                      <TableCell>{summary.readingTime}</TableCell>
                    </TableRow>
                  )}
                  {summary.keyPoints && (
                    <TableRow>
                      <TableCell className="font-medium">Key Points</TableCell>
                      <TableCell>{summary.keyPoints.length}</TableCell>
                    </TableRow>
                  )}
                  {summary.sourceType && (
                    <TableRow>
                      <TableCell className="font-medium">Source Type</TableCell>
                      <TableCell className="capitalize">{summary.sourceType}</TableCell>
                    </TableRow>
                  )}
                  {summary.fileName && (
                    <TableRow>
                      <TableCell className="font-medium">File Name</TableCell>
                      <TableCell>{summary.fileName}</TableCell>
                    </TableRow>
                  )}
                  {summary.fileType && (
                    <TableRow>
                      <TableCell className="font-medium">File Type</TableCell>
                      <TableCell>{summary.fileType}</TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </motion.div>
          </TabsContent>
        </Tabs>
        
        <motion.div 
          className="border-t border-border p-4 flex justify-between items-center bg-card/30"
          initial={{ opacity: 0, y: 10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5 }}
        >
          <p className="text-xs text-muted-foreground">
            AI-generated summaries may miss nuances or context. Review for accuracy.
          </p>
          
          <AnimatedButton onClick={onReset} variant="outline" className="text-sm px-4 py-2" icon={<RefreshCw className="w-4 h-4" />}>
            New Summary
          </AnimatedButton>
        </motion.div>
      </motion.div>
    </motion.div>
  );
};

export default SummaryResult;
